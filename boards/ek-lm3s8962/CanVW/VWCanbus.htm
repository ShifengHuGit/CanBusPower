<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [G:\Git\CanBusPower\boards\ek-lm3s8962\CanVW\VWCanbus.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image G:\Git\CanBusPower\boards\ek-lm3s8962\CanVW\VWCanbus.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 484]: Last Updated: Tue Feb 16 19:05:58 2021
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ProcessInterrupts &rArr; usprintf &rArr; uvsnprintf &rArr; strncpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[22a161c]">Reset_Handler</a>
 <LI><a href="#[22a1694]">__user_initial_stackheap</a>
 <LI><a href="#[22a17c0]">NmiSR</a>
 <LI><a href="#[22a1784]">FaultISR</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[229e610]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[229e610]">UARTCharPut</a><BR>
 <LI><a href="#[22a17c0]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22a17c0]">NmiSR</a><BR>
 <LI><a href="#[22a1784]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22a1784]">FaultISR</a><BR>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22a1748]">IntDefaultHandler</a><BR>
 <LI><a href="#[229e5d4]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[229e5d4]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[229fba0]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[229fba0]">SysCtlDelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22a161c]">Reset_Handler</a>
 <LI><a href="#[22a17c0]">NmiSR</a>
 <LI><a href="#[22a1784]">FaultISR</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a15e0]">CANHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[22a1748]">IntDefaultHandler</a>
 <LI><a href="#[2e58318]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22a161c]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2e5c350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e5c350]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e55c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2e5c224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[22a161c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[2e55c6c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2e5c350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e55c30]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5c224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e55bf4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2e55bb8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2e55d98]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2e55d5c]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2e55a14]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e5b270]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e5bbd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2e59740]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2e597b8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2e59b78]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2e59a10]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2e59650]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2e596c8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2e59a88]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2e59998]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2e59f74]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2e59dd0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[2e59d58]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2e59ce0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2e59c68]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2e59bf0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2e59e84]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2e59614]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[2e59b00]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2e59920]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2e59efc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2e58660]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e58e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2e579f4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2e57814]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2e577d8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2e57940]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2e57aa8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2e578c8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2e5c224]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e55c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2e5c350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e5bc84]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2e5b900]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5b7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e5bbd0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2e5b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2e5bc0c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2e5bb1c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ProcessInterrupts &rArr; usprintf &rArr; uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e5b66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2e5bb58]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2e5aaf0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e5b66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2e58e94]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2e58660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2e58ed0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2e58e58]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e58b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[229fba0]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[229fba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[229e688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[229fba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[22a035c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syswait_us
<LI><a href="#[22a0398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syswait_ms
</UL>

<P><STRONG><a name="[229711c]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[22970e0]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[229e6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[2e60298]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[22a1694]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5b7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22a0398]"></a>Syswait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Syswait_ms &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[229fba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[229fbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22a0014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit
</UL>

<P><STRONG><a name="[22a035c]"></a>Syswait_us</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Syswait_us &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[229fba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[229fbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>

<P><STRONG><a name="[22a0320]"></a>E2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = E2
</UL>
<BR>[Calls]<UL><LI><a href="#[229fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[22a0104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteLCDL
</UL>

<P><STRONG><a name="[22a02e4]"></a>E1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = E1
</UL>
<BR>[Calls]<UL><LI><a href="#[229fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[22a01f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteLCDH
</UL>

<P><STRONG><a name="[22a02a8]"></a>RW</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RW
</UL>
<BR>[Calls]<UL><LI><a href="#[229fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[22a0104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteLCDL
<LI><a href="#[22a01f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteLCDH
</UL>

<P><STRONG><a name="[22a026c]"></a>RS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS
</UL>
<BR>[Calls]<UL><LI><a href="#[229fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[22a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataL
<LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
<LI><a href="#[22a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataH
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>

<P><STRONG><a name="[22a0230]"></a>REST</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[22a01f4]"></a>SendByteLCDH</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendByteLCDH &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a02a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RW
<LI><a href="#[22a02e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E1
</UL>
<BR>[Called By]<UL><LI><a href="#[22a01b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWH
</UL>

<P><STRONG><a name="[22a01b8]"></a>SPIWH</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIWH &rArr; SendByteLCDH &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a01f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteLCDH
</UL>
<BR>[Called By]<UL><LI><a href="#[22a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataH
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>

<P><STRONG><a name="[22a017c]"></a>WRCommandH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WRCommandH &rArr; SPIWH &rArr; SendByteLCDH &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a01b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWH
<LI><a href="#[22a026c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS
<LI><a href="#[22a035c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syswait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[229fd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRGDRAM1
<LI><a href="#[229fdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEARGDRAMH
<LI><a href="#[229fe70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCGCharH
<LI><a href="#[229fee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCGRAMH
<LI><a href="#[229ff60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNUMCharH
<LI><a href="#[229ffd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharH
<LI><a href="#[22a0014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit
</UL>

<P><STRONG><a name="[22a0140]"></a>WRDataH</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WRDataH &rArr; SPIWH &rArr; SendByteLCDH &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a01b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWH
<LI><a href="#[22a026c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS
</UL>
<BR>[Called By]<UL><LI><a href="#[229fd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRGDRAM1
<LI><a href="#[229fdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEARGDRAMH
<LI><a href="#[229fe70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCGCharH
<LI><a href="#[229fee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCGRAMH
<LI><a href="#[229ff60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNUMCharH
<LI><a href="#[229ffd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharH
</UL>

<P><STRONG><a name="[22a0104]"></a>SendByteLCDL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendByteLCDL &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a02a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RW
<LI><a href="#[22a0320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2
</UL>
<BR>[Called By]<UL><LI><a href="#[22a00c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWL
</UL>

<P><STRONG><a name="[22a00c8]"></a>SPIWL</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIWL &rArr; SendByteLCDL &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a0104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteLCDL
</UL>
<BR>[Called By]<UL><LI><a href="#[22a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataL
<LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
</UL>

<P><STRONG><a name="[22a008c]"></a>WRCommandL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WRCommandL &rArr; SPIWL &rArr; SendByteLCDL &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a00c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWL
<LI><a href="#[22a026c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS
<LI><a href="#[22a035c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syswait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[229fd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRGDRAM1
<LI><a href="#[229fdbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEARGDRAML
<LI><a href="#[229fe34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCGCharL
<LI><a href="#[229feac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCGRAML
<LI><a href="#[229ff24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNUMCharL
<LI><a href="#[229ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharL
<LI><a href="#[22a0014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit
</UL>

<P><STRONG><a name="[22a0050]"></a>WRDataL</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WRDataL &rArr; SPIWL &rArr; SendByteLCDL &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a00c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWL
<LI><a href="#[22a026c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS
</UL>
<BR>[Called By]<UL><LI><a href="#[229fd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRGDRAM1
<LI><a href="#[229fdbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEARGDRAML
<LI><a href="#[229fe34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCGCharL
<LI><a href="#[229feac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCGRAML
<LI><a href="#[229ff24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNUMCharL
<LI><a href="#[229ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharL
</UL>

<P><STRONG><a name="[22a0014]"></a>LCDInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCDInit &rArr; WRCommandL &rArr; SPIWL &rArr; SendByteLCDL &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
<LI><a href="#[22a0398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syswait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229ffd8]"></a>ShowQQCharH</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ShowQQCharH &rArr; WRDataH &rArr; SPIWH &rArr; SendByteLCDH &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataH
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[229eac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECU_Session_setup
<LI><a href="#[229fc54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayEngine
<LI><a href="#[229fc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayCHINSE2
<LI><a href="#[229fccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayCHINSE1
<LI><a href="#[229fd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayCHINSE
</UL>

<P><STRONG><a name="[229ff9c]"></a>ShowQQCharL</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, 19264lcddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ShowQQCharL &rArr; WRDataL &rArr; SPIWL &rArr; SendByteLCDL &rArr; RW
</UL>
<BR>[Calls]<UL><LI><a href="#[22a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataL
<LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[229ea84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInterrupts
<LI><a href="#[229fc54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayEngine
<LI><a href="#[229fc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayCHINSE2
<LI><a href="#[229fccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayCHINSE1
<LI><a href="#[229fd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayCHINSE
</UL>

<P><STRONG><a name="[229ff60]"></a>ShowNUMCharH</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataH
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>
<BR>[Called By]<UL><LI><a href="#[229fd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayTEST
</UL>

<P><STRONG><a name="[229ff24]"></a>ShowNUMCharL</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataL
<LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
</UL>
<BR>[Called By]<UL><LI><a href="#[229fd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayTEST
</UL>

<P><STRONG><a name="[229fee8]"></a>WRCGRAMH</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataH
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>

<P><STRONG><a name="[229feac]"></a>WRCGRAML</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataL
<LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
</UL>

<P><STRONG><a name="[229fe70]"></a>ShowCGCharH</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataH
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>

<P><STRONG><a name="[229fe34]"></a>ShowCGCharL</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataL
<LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
</UL>

<P><STRONG><a name="[229fdf8]"></a>CLEARGDRAMH</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataH
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>

<P><STRONG><a name="[229fdbc]"></a>CLEARGDRAML</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataL
<LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
</UL>

<P><STRONG><a name="[229fd80]"></a>WRGDRAM1</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataL
<LI><a href="#[22a008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandL
<LI><a href="#[22a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDataH
<LI><a href="#[22a017c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRCommandH
</UL>

<P><STRONG><a name="[229fd44]"></a>displayTEST</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229ff24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNUMCharL
<LI><a href="#[229ff60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNUMCharH
</UL>

<P><STRONG><a name="[229fd08]"></a>displayCHINSE</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharL
<LI><a href="#[229ffd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharH
</UL>

<P><STRONG><a name="[229fccc]"></a>displayCHINSE1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharL
<LI><a href="#[229ffd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharH
</UL>

<P><STRONG><a name="[229fc90]"></a>displayCHINSE2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharL
<LI><a href="#[229ffd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharH
</UL>

<P><STRONG><a name="[229fc54]"></a>displayEngine</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, 19264lcddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharL
<LI><a href="#[229ffd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharH
</UL>

<P><STRONG><a name="[229eb38]"></a>UARTSend</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clienttester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[229e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInterrupts
</UL>

<P><STRONG><a name="[22a15e0]"></a>CANHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, clienttester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANHandler &rArr; CANIntStatus &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[229e8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[229e958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[229eafc]"></a>CANConfigureNetwork</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, clienttester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CANConfigureNetwork &rArr; CANMessageSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229e82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229eac0]"></a>ECU_Session_setup</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, clienttester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ECU_Session_setup &rArr; usprintf &rArr; uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[229e520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[229e82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[229e868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[229e8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[229ffd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharH
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229ea84]"></a>ProcessInterrupts</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, clienttester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ProcessInterrupts &rArr; usprintf &rArr; uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[229e520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[229e868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[229eb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[229ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharL
<LI><a href="#[2e5c788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229ea48]"></a>main</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, clienttester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; ProcessInterrupts &rArr; usprintf &rArr; uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[229e598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFODisable
<LI><a href="#[229e5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[229e64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[229e688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[229e6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[229e700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[229e73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[229e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[229e7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[229e7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[229e82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[229e91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[229e994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[229e9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[229ea0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
<LI><a href="#[229ea84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInterrupts
<LI><a href="#[229eac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECU_Session_setup
<LI><a href="#[229eafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANConfigureNetwork
<LI><a href="#[229fbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[229fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[229ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharL
<LI><a href="#[229ffd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowQQCharH
<LI><a href="#[22a0014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit
<LI><a href="#[22a0398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syswait_ms
<LI><a href="#[2e5c788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5bb1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[229e070]"></a>uvsnprintf</STRONG> (Thumb, 738 bytes, Stack size 64 bytes, ustdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5c5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[229e034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[229e520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>

<P><STRONG><a name="[229e520]"></a>usprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ustdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usprintf &rArr; uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[229e070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInterrupts
<LI><a href="#[229eac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECU_Session_setup
</UL>

<P><STRONG><a name="[229e034]"></a>usnprintf</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229e070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[229dff8]"></a>ulocaltime</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, ustdlib.o(.text), UNUSED)

<P><STRONG><a name="[229dfbc]"></a>ustrtoul</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, ustdlib.o(.text), UNUSED)

<P><STRONG><a name="[229df80]"></a>ustrstr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5c878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e5c968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[2e5c968]"></a>strncmp</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229df80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
</UL>

<P><STRONG><a name="[2e5c878]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229df80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
</UL>

<P><STRONG><a name="[2e5c788]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[229ea84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInterrupts
</UL>

<P><STRONG><a name="[2e5c74c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e5c710]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e5c6d4]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e5bf90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2e5c5e4]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5bfcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[229e070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[2e5c4b8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2e5c47c]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2e5c440]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2e5bfcc]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5c5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[2e5bf90]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5c6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2e5bf54]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[2e5b7d4]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[22a1694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2e5abe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5b900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2e5b66c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e5aaf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5bb1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e5ac1c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e5abe0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5b7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e5aba4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e58b4c]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e58e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2e58318]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[2e582dc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[229ea0c]"></a>CANBitTimingSet</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, can.o(i.CANBitTimingSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANBitTimingSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e9d0]"></a>CANEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, can.o(i.CANEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e994]"></a>CANInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, can.o(i.CANInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANInit &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e958]"></a>CANIntClear</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, can.o(i.CANIntClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANIntClear &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[22a15e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANHandler
</UL>

<P><STRONG><a name="[229e91c]"></a>CANIntEnable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(i.CANIntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANIntEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e8e0]"></a>CANIntStatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, can.o(i.CANIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANIntStatus &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[22a15e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANHandler
</UL>

<P><STRONG><a name="[229e8a4]"></a>CANMessageClear</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, can.o(i.CANMessageClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANMessageClear &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[229eac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECU_Session_setup
</UL>

<P><STRONG><a name="[229e868]"></a>CANMessageGet</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, can.o(i.CANMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CANMessageGet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInterrupts
<LI><a href="#[229eac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECU_Session_setup
</UL>

<P><STRONG><a name="[229e82c]"></a>CANMessageSet</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, can.o(i.CANMessageSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CANMessageSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[229eac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECU_Session_setup
<LI><a href="#[229eafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANConfigureNetwork
</UL>

<P><STRONG><a name="[2298ae4]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[229e73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[229e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[229e7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
</UL>

<P><STRONG><a name="[229e7f0]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[229e73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[229e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[229e7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e7b4]"></a>GPIOPinTypeCAN</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeCAN
</UL>
<BR>[Calls]<UL><LI><a href="#[2298ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[229e7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e778]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[2298ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[229e7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e73c]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[2298ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[229e7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229fc18]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22a0230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REST
<LI><a href="#[22a026c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS
<LI><a href="#[22a02a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RW
<LI><a href="#[22a02e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E1
<LI><a href="#[22a0320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2
</UL>

<P><STRONG><a name="[229b6f4]"></a>IntDisable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[229e700]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[229c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e6c4]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[22970e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229fbdc]"></a>SysCtlClockGet</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22a035c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syswait_us
<LI><a href="#[22a0398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syswait_ms
</UL>

<P><STRONG><a name="[229e688]"></a>SysCtlClockSet</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[229fba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e64c]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e610]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[229e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[229e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[229eb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[22a15e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANHandler
</UL>

<P><STRONG><a name="[229e5d4]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[229e5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[229e5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229e598]"></a>UARTFIFODisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTFIFODisable))
<BR><BR>[Called By]<UL><LI><a href="#[229ea48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[22a17c0]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22a17c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[22a17c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22a1784]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22a1784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[22a1784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22a1748]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22a1748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22a1748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[229c2ac]"></a>CANRegRead</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, can.o(i.CANRegRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[229b6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[229e700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[229e82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[229e868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[229e8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[229e8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[229e91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[229e958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[229e994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[229e9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[229ea0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
